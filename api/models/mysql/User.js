/**
	Generated by sails-inverse-model
	Date:Fri Jul 27 2018 15:53:08 GMT+0200 (CEST)
*/
module.exports = {
  attributes: {
    //  ╔═╗╦═╗╦╔╦╗╦╔╦╗╦╦  ╦╔═╗╔═╗
    //  ╠═╝╠╦╝║║║║║ ║ ║╚╗╔╝║╣ ╚═╗
    //  ╩  ╩╚═╩╩ ╩╩ ╩ ╩ ╚╝ ╚═╝╚═╝
    user_id: {
      type: Sequelize.INTEGER,
      primaryKey: true,
      autoIncrement: true,
      allowNull: false
    },
    user_first_name: {
      type: Sequelize.STRING,
      allowNull: true
    },
    user_last_name: {
      type: Sequelize.STRING,
      allowNull: true
    },
    user_email: {
      type: Sequelize.STRING,
      allowNull: true
    },
    user_address: {
      type: Sequelize.STRING,
      allowNull: true
    },
    user_password: {
      type: Sequelize.STRING,
      allowNull: true
    },
    user_landline: {
      type: Sequelize.STRING,
      allowNull: true
    },
    user_mobile: {
      type: Sequelize.STRING,
      allowNull: true
    },


    //  ╔═╗╔╦╗╔╗ ╔═╗╔╦╗╔═╗
    //  ║╣ ║║║╠╩╗║╣  ║║╚═╗
    //  ╚═╝╩ ╩╚═╝╚═╝═╩╝╚═╝

  },
  associations: function () {
  
    //  ╔═╗╔═╗╔═╗╔═╗╔═╗╦╔═╗╔╦╗╦╔═╗╔╗╔╔═╗
    //  ╠═╣╚═╗╚═╗║ ║║  ║╠═╣ ║ ║║ ║║║║╚═╗
    //  ╩ ╩╚═╝╚═╝╚═╝╚═╝╩╩ ╩ ╩ ╩╚═╝╝╚╝╚═╝

  },
  defaultScope: function () {
    //  ╔═╗╔═╗╔═╗╔═╗╔═╗
    //  ╚═╗║  ║ ║╠═╝║╣
    //  ╚═╝╚═╝╚═╝╩  ╚═╝
    return {}
  },
  options: {
    tableName: 'tbl_user',
    classMethods: {},
    instanceMethods: {
      toPublicJSON: function () {
        return _.omit(this.toJSON(), 'user_password')
      }
    },

    hooks: {
      beforeCreate: async function (user, options) {
          try {
            var exist = await User.findOne({
              where: {
                user_email: user.user_email
              }
            });
            if (!exist) {
              user.user_password = await sails.helpers.passwords.hashPassword(user.user_password);
              user.check_code = sails.shortid.generate();
            } else {
              // var error = JSON.stringify({message:sails.__('User already exists.')});
              throw new Error(sails.__('User already exists.'));

            }
          } catch (ex) {
            throw new Error(ex.message);
          }
        },
        afterCreate: async function (user, options = {}) {
            try {

              if (!options.transaction) {
                options.transaction = await User.sequelize.transaction();
              }

            } catch (ex) {
              await user.destroy();
              throw new Error(ex.message);
            }
            return user;
          },
          beforeUpdate: async function (user, inputs, options) {
              try {
                if (inputs.fields && inputs.fields.includes('user_password')) {
                  user.user_password = await sails.helpers.passwords.hashPassword(user.user_password);
                }
              } catch (ex) {
                throw new Error(ex.message);
              }
            },
            afterDestroy: async function (user, options) {
              try {
                //console.log(options);
              } catch (ex) {

              }
            }
    },
    scopes: {},
    timestamps: false,
    connection: 'default'
  }
};
